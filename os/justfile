QEMU := "../../qemu/qemu-5.0/riscv64-softmmu/qemu-system-riscv64"
# machine, supervisor, user, echo1, echo2
SERIAL_FLAGS := "-serial /dev/pts/0 -serial /dev/pts/4 -serial /dev/pts/1 -serial tcp::23334,server,nowait -serial tcp:localhost:23334"

TARGET := "riscv64gc-unknown-none-elf"
MODE := "release"
OBJDUMP := "rust-objdump --arch-name=riscv64"
OBJCOPY := "rust-objcopy --binary-architecture=riscv64"

BUILD_PATH := "target/" + TARGET + "/" + MODE + "/"
KERNEL_ELF := BUILD_PATH + "os"
KERNEL_ASM := BUILD_PATH + "os.asm"
KERNEL_BIN := BUILD_PATH + "os.bin"
KERNEL_BIN_LRV := BUILD_PATH + "rcore-n.bin"
FS_IMG := "../user/target/" + TARGET + "/" + MODE + "/fs.img"
IMG := "./fs-img"

clean:
    cargo clean
    cd ../unifi-sche && cargo clean
    cd ../user && make clean && cd -

unifi-sche:
    cd ../unifi-sche && make build

user:
    cd ../user && make build

user_lrv:
    cd ../user && make build_lrv

build: user unifi-sche fs-img
    @cp src/linker-qemu.ld src/linker.ld
    @cargo build --features "board_qemu" --release
    @{{OBJCOPY}} {{KERNEL_ELF}} --strip-all -O binary {{KERNEL_BIN}}
    @rm src/linker.ld

build_lrv: user_lrv
    cp src/linker-lrv.ld src/linker.ld
    cargo build --features "board_lrv" --release
    {{OBJCOPY}} {{KERNEL_ELF}} --strip-all -O binary {{KERNEL_BIN}}
    cp {{KERNEL_BIN}} {{KERNEL_BIN_LRV}}
    rm src/linker.ld

disasm: build
    {{OBJDUMP}} -S -t {{KERNEL_ELF}} > {{KERNEL_ASM}}

disasm_lrv: build_lrv
    {{OBJDUMP}} -S -t {{KERNEL_ELF}} > {{KERNEL_ASM}}

fat32:
    @if [ -e /mnt/fat32 ]; then \
        echo "/mnt/fat32 exist"; \
    else \
      echo "/mnt/fat32 not exits"; \
      sudo mkdir /mnt/fat32; \
    fi
    @sudo touch {{IMG}}
    @sudo chmod 777 {{IMG}}
    @sudo dd if=/dev/zero of={{IMG}} bs=512 count=131072
    @sudo mkfs.fat -F 32 {{IMG}}
    @if mountpoint -q /mnt/fat32; then \
    		sudo umount /mnt/fat32; \
    	fi
    @sudo mount {{IMG}} /mnt/fat32
    @sync

fs-img:
	@rm -f {{FS_IMG}}
	@cd ../easy-fs-fuse && cargo run --release -- -s ../user/src/bin/ -t ../user/target/riscv64gc-unknown-none-elf/release/


run: build
    {{QEMU}} \
    -machine virt \
    -smp 1 \
    {{SERIAL_FLAGS}} \
    -nographic \
    -bios ./rustsbi-qemu.bin \
    -device loader,file={{KERNEL_BIN}},addr=0x80200000 \
    -drive file={{FS_IMG}},if=none,format=raw,id=x0 \
    -device virtio-blk-device,drive=x0

#    -global virtio-mmio.force-legacy=false \
debug_qemu: build
    {{QEMU}} -machine virt -smp 4 {{SERIAL_FLAGS}} -nographic -bios ./rustsbi-qemu.bin -device loader,file={{KERNEL_BIN}},addr=0x80200000 -d int -D debug.log

debug: build disasm
    tmux new-session -d "{{QEMU}} -machine virt -smp 4 {{SERIAL_FLAGS}} -nographic -bios ./rustsbi-qemu.bin -device loader,file={{KERNEL_BIN}},addr=0x80200000 -s -S" && tmux split-window -h "riscv64-unknown-elf-gdb -ex 'file {{KERNEL_ELF}}' -ex 'set arch riscv:rv64' -ex 'target remote localhost:1234'" && tmux -2 attach-session -d

debug_all: build disasm
    tmux new-session -d "{{QEMU}} -machine virt -smp 4 {{SERIAL_FLAGS}} -nographic -bios ./rustsbi-qemu.bin -device loader,file={{KERNEL_BIN}},addr=0x80200000 -d int -D debug.log -s -S" && tmux split-window -h "riscv64-unknown-elf-gdb -ex 'file {{KERNEL_ELF}}' -ex 'set arch riscv:rv64' -ex 'target remote localhost:1234'" && tmux -2 attach-session -d
